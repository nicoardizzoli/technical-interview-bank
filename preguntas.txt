1) Relaciones, ej OneToOne, OneToMany, etc. (tengo el diagrama que hice y el enunciado)

2) en los controllers, usamos los DTO para la transferencia de datos, pero esta mal si se usa la clase del modelo en si en algun aparte?
no para transferencia de datos pero si por ej cuando se retorna un save y poder mostrar el id ??
SOLAMENTE TIENEN QUE USAR DTOS, no agregar logica de negocio, lo que podemos hacer por ej cuando se retorna un save, es setearle el ID al DTO desp del save, y retornar el mismo dto

3) exceptions: es mejor hacer una exception generica con un mensaje especifico para cada evento o hacer una custom exception por cada evento o algo intermedio?
ej: ClienteNotFoundException, CuentaNotFoundException, MovimientoNotFoundException o NotFoundException y listo ... // DEJAR LO MAS GENERICO POSIBLE.

4) los query params cuando se deberian utilizar?,  siempre es mejor intentar mandar todo en el payload o podemos mandarlo tmb por parametros?
//primero siempre definir bien el path, intentar enviar lo mas posible por aca, filtros o sorting por parametros (ver si se puede poner en por header, por ej tokens)...

5) Forma adecuada de comentar el codigo //se explica el porque y no el como, por ej
los metodos publicos se suelen comentar, por ej que tengan parametros se pueden comentar para que son. lo que es interno no tiene mucho sentido
comentarlo a lo sumo que sea dificil de entender.

6) movimiento repository: seria mejor mantener los metodos simples? o por ej combinar alguno (tengo el codigo para revisar)

7) bidireccionalidad esta bien que en el movimientoservice se guarde la cuenta y que la cuenta haga el add de movimiento que genere la bidirec? (tengo el codigo para revisar)

8) es mejor declarar variables para que quede mas legible o directamente poner como parametro la expresion inline (ver movimiento service)

9) Como podria hacer en el Excepcion handler para enviar o no el throwable a la response, agregando algun boolean ? // segun el ambiente en que se este ejecutando podemos ocultar el throwable
y por ej logearlo en algun servicio de log.

10) La logica del control de los parametros que nos envian etc, se hace en el mismo controller, o en el service?  // para revisar pero seguramente sea el service.

11) Integration test: si tengo que probar un repository que necesita guardar cosas con otro repository, los usamos o como habria que hacer (ver MovimientoRepositoryTest)


13) en los test, estaria bueno hacer un TestUtils donde por ej haya metodos que devuelvan entidades que se utilizan en varios test, como por ej Cliente, o ClienteDTO etc
si la respuesta es si, los metodos de TestUtils serian static? asi no tengo que crear una instancia... // seria una buena idea para creacion de modelo y asserts.

14) Idioma del codigo, programamos en ingles? o preguntamos en la entrevista. // siempre hacerlo en ingles.

15) las entrevistas, son mas de live coding? o mas de que te dan un ejercicio y un tiempo para que lo resuelvas?
Compartis tu pantalla o como es?
patrones de dise√±o
solid
buenas practicas.
clean arq
testing
seguridad
persistencia
integracion continua.